Index: src/main/java/controllerApplicativo/LoginControllerApplicativo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllerApplicativo;\r\n\r\nimport engineering.bean.LoginBean;\r\nimport engineering.bean.RegistrazioneBean;\r\nimport engineering.dao.UtenteDAO;\r\nimport engineering.dao.UtenteDAOJSON;\r\nimport engineering.eccezioni.UtenteNonEsistenteEccezione;\r\nimport modelli.Giocatore;\r\nimport modelli.Login;\r\nimport modelli.Utente;\r\n\r\npublic class LoginControllerApplicativo {\r\n\r\n    public LoginControllerApplicativo() {\r\n    }\r\n\r\n    public void verificaCredenziali(LoginBean loginBean) {\r\n\r\n        //controllo delle credenziali\r\n        try {\r\n\r\n            //richiedo dalla persistenza i dati relativi all'email e password inseriri\r\n            //UtenteDAO dao = new UtenteDAOMySQL();             //INIZIO PER SEMPLICITà DICENDO CHE SCRIVO SU JSON\r\n\r\n            //creo un utente da passare all'interno del sistema\r\n            Login login = new Login(loginBean.getEmail(), loginBean.getPassword());\r\n\r\n\r\n            RegistrazioneBean registrazioneBean= new RegistrazioneBean(loginBean.getEmail(), loginBean.getPassword(),\"Username di Prova\", false);\r\n\r\n            //PROVA\r\n            Utente utente = new Giocatore(login.getEmail(), login.getPassword());\r\n            UtenteDAO utenteDao = new UtenteDAOJSON();\r\n            utenteDao.inserisciUtente(utente);\r\n\r\n            /*\r\n\r\n            //richiedo i dati dell'utente, se esiste\r\n            Utente utente = dao.recuperaUtenteDaLogin(login);\r\n\r\n            System.out.println(\"Recupero Utente completato\");\r\n\r\n            //se l'utente è diverso da null ho trovato l'utente: creo un bean utente\r\n            if (utente == null) {\r\n                //gestisco il caso in cui in cui ho un utente void\r\n            }\r\n\r\n            //creazione del bean da passare al prossimo controllore grafico con tutti i dati dell'utente\r\n            GenericoBean genericoBean;\r\n            if (utente.getAllenatore()) {\r\n                genericoBean = new AllenatoreBean(utente.getEmail(), utente.getEmail(), utente.getAllenamenti(), utente.getSquadra());\r\n            } else\r\n            {\r\n                genericoBean = new GiocatoreBean(utente.getEmail(), utente.getEmail(), utente.getAllenamenti(), utente.getSquadra());\r\n            }\r\n\r\n            //cambio di scena passando il bean appena creato\r\n\r\n             */\r\n\r\n        }\r\n\r\n        catch (Exception e)\r\n        {\r\n            throw new UtenteNonEsistenteEccezione(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void creazioneUtente(LoginBean loginBean) {\r\n        //ci occupiamo di inizializzare tutti le entità che fanno parte del caso d'uso\r\n\r\n        //creazione dell'utente\r\n\r\n        //richiedo al DB i dati dei singoli allenamenti inerenti all'utente\r\n\r\n        //creazione dell'allenamento\r\n\r\n\r\n        //Allenamento allenamento = new Allenamento(\"12/12/2020\", \"1h\");\r\n\r\n\r\n        //aggiunta dell'allenamento selezionato all'utente per ogni allenamento nel DB per quell'utente\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controllerApplicativo/LoginControllerApplicativo.java b/src/main/java/controllerApplicativo/LoginControllerApplicativo.java
--- a/src/main/java/controllerApplicativo/LoginControllerApplicativo.java	(revision cdcf5c3e8fb46d2eb6f3148c65b1e98a402e4a99)
+++ b/src/main/java/controllerApplicativo/LoginControllerApplicativo.java	(date 1732642567055)
@@ -4,9 +4,11 @@
 import engineering.bean.RegistrazioneBean;
 import engineering.dao.UtenteDAO;
 import engineering.dao.UtenteDAOJSON;
+import engineering.dao.UtenteDAOMySQL;
 import engineering.eccezioni.UtenteNonEsistenteEccezione;
 import modelli.Giocatore;
 import modelli.Login;
+import modelli.Registrazione;
 import modelli.Utente;
 
 public class LoginControllerApplicativo {
@@ -26,12 +28,10 @@
             Login login = new Login(loginBean.getEmail(), loginBean.getPassword());
 
 
-            RegistrazioneBean registrazioneBean= new RegistrazioneBean(loginBean.getEmail(), loginBean.getPassword(),"Username di Prova", false);
-
             //PROVA
-            Utente utente = new Giocatore(login.getEmail(), login.getPassword());
-            UtenteDAO utenteDao = new UtenteDAOJSON();
-            utenteDao.inserisciUtente(utente);
+            Registrazione registrazione = new Registrazione(login.getEmail(), login.getPassword(), "Username di Prova", false);
+            UtenteDAO utenteDao = new UtenteDAOMySQL();
+            utenteDao.inserisciUtente(registrazione);
 
             /*
 
@@ -41,8 +41,9 @@
             System.out.println("Recupero Utente completato");
 
             //se l'utente è diverso da null ho trovato l'utente: creo un bean utente
-            if (utente == null) {
+            if (utente == null){
                 //gestisco il caso in cui in cui ho un utente void
+
             }
 
             //creazione del bean da passare al prossimo controllore grafico con tutti i dati dell'utente
Index: src/main/java/engineering/query/QueriesLogin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package engineering.query;\r\n\r\nimport modelli.Allenamento;\r\nimport modelli.Login;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Statement;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class QueriesLogin {\r\n\r\n    //public QueriesLogin() {}\r\n\r\n    public static ResultSet RecuperaUtentePerLogin(Statement stmt, Login login) throws SQLException {\r\n        try {\r\n            String query= \"SELECT * FROM utenti where username = '\" + login.getEmail() + \"' and password = '\" +login.getPassword()+\"' ;\";\r\n            ResultSet resultSet = stmt.executeQuery(query);\r\n            return resultSet;\r\n\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public static List<Allenamento> recuperaAllenamentiPerData(Statement stmt, String PrimaryKey) throws SQLException {\r\n\r\n        ResultSet rs = null;\r\n        String query = \"SELECT * from allenamento where nome = '\"+ PrimaryKey +\"' ;\";\r\n\r\n\r\n        rs = stmt.executeQuery(query);\r\n        List<Allenamento> allenamenti = new ArrayList<>();\r\n        while (rs.next()) {\r\n            Allenamento allenamento = new Allenamento();\r\n            allenamento.setData(rs.getString(\"data\"));\r\n            allenamento.setDurata(rs.getInt(\"durata\"));\r\n            allenamento.setDescrizione(rs.getString(\"descrizione\"));\r\n            allenamenti.add(allenamento);\r\n        }\r\n        return allenamenti;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/engineering/query/QueriesLogin.java b/src/main/java/engineering/query/QueriesLogin.java
--- a/src/main/java/engineering/query/QueriesLogin.java	(revision cdcf5c3e8fb46d2eb6f3148c65b1e98a402e4a99)
+++ b/src/main/java/engineering/query/QueriesLogin.java	(date 1732783679982)
@@ -3,21 +3,38 @@
 import modelli.Allenamento;
 import modelli.Login;
 
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.Statement;
+import java.sql.*;
 import java.util.ArrayList;
 import java.util.List;
 
 public class QueriesLogin {
 
-    //public QueriesLogin() {}
+    /*
+    public static int InserimentoUtente(Statement stmt, Login login) throws SQLException {
+        try {
+            String query= "SELECT * FROM utenti where username = ? and password = ? ;";
+
+            int risultato = stmt.executeUpdate(query);
+            return risultato;
+
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+     */
 
-    public static ResultSet RecuperaUtentePerLogin(Statement stmt, Login login) throws SQLException {
+    public static ResultSet RecuperaUtentePerLogin(Connection connection, Login login) throws SQLException {
+        PreparedStatement statement = null;
+
         try {
-            String query= "SELECT * FROM utenti where username = '" + login.getEmail() + "' and password = '" +login.getPassword()+"' ;";
-            ResultSet resultSet = stmt.executeQuery(query);
-            return resultSet;
+            String query= "SELECT * FROM utenti where username = ? and password = ? ;";
+            statement = connection.prepareStatement(query);
+
+            statement.setString(1, login.getEmail());
+            statement.setString(2, login.getPassword());
+
+            return statement.executeQuery();
 
         } catch (SQLException e) {
             throw new RuntimeException(e);
@@ -27,7 +44,7 @@
     public static List<Allenamento> recuperaAllenamentiPerData(Statement stmt, String PrimaryKey) throws SQLException {
 
         ResultSet rs = null;
-        String query = "SELECT * from allenamento where nome = '"+ PrimaryKey +"' ;";
+        String query = "SELECT * from allenamento where nome = ? ;";
 
 
         rs = stmt.executeQuery(query);
@@ -41,4 +58,22 @@
         }
         return allenamenti;
     }
+
+
+    //DA RIVEDERE!!!
+    public Boolean RecuperaAllenamentiPerUtente(Connection connection, Login login) throws SQLException {
+        PreparedStatement statement = null;
+
+        try {
+            String query= "SELECT * FROM allenamento where username = ? ;";
+            statement = connection.prepareStatement(query);
+
+            statement.setString(1, login.getEmail());
+
+            return statement.execute();
+
+        } catch (SQLException e) {
+            throw new RuntimeException(e);
+        }
+    }
 }
Index: src/main/java/engineering/dao/UtenteDAOMySQL.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package engineering.dao;\r\n\r\nimport engineering.query.QueriesLogin.*;\r\nimport engineering.eccezioni.UtenteNonEsistenteEccezione;\r\nimport modelli.*;\r\n\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static engineering.query.QueriesLogin.RecuperaUtentePerLogin;\r\nimport static engineering.query.QueriesLogin.recuperaAllenamentiPerData;\r\n\r\npublic class UtenteDAOMySQL implements UtenteDAO {\r\n\r\n    public void inserisciUtente(Utente utente)\r\n    {\r\n        String query=\"insert into utenti(user, email, password, squadre, allenatore) values ('nonLoSo', 'boh', 'bohNonSo',NULL,'false');\";\r\n    }//throws EmailAlreadyInUseException, UsernameAlreadyInUseException;\r\n\r\n    public Utente caricaUtente(String string)\r\n    {return null;}//throws UserDoesNotExistException;\r\n\r\n\r\n    public class MySQLConnection\r\n    {\r\n        private static final String URL = \"jdbc:mysql://localhost:3306/database\";\r\n        private static final String USER = \"root\";\r\n        private static final String PASSWORD = \"root\";\r\n\r\n        public static Connection getConnection()\r\n        {\r\n            Connection connection = null;\r\n            try\r\n            {\r\n                connection = DriverManager.getConnection(URL, USER, PASSWORD);\r\n            } catch (SQLException e)\r\n            {\r\n                e.printStackTrace();\r\n            }\r\n            return connection;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    public Utente recuperaUtenteDaLogin(Login login) throws  UtenteNonEsistenteEccezione {\r\n        Statement stmt = null, stmtSquad = null, stmtAll = null;\r\n        Connection conn;\r\n        ResultSet rs = null, rsSquad = null, rsAll = null;\r\n        Utente utente;\r\n\r\n        //apriamo la connessione con il DB\r\n        conn = MySQLConnection.getConnection();\r\n        if (conn != null) {\r\n            try {\r\n                //creaiamo lo statement per il caso\r\n                stmt = conn.createStatement();\r\n\r\n                //invocazione del metodo per la ricerca dell'utente in funzione della variabile di ricerca\r\n                rs = RecuperaUtentePerLogin(stmt, login);\r\n\r\n\r\n                while (rs.next()) {\r\n                    System.out.println(\"username: \" + rs.getString(\"username\"));\r\n                    System.out.println(\"password: \" + rs.getInt(\"password\"));\r\n\r\n                    if(rs.getBoolean(\"allenatore\"))\r\n                    {\r\n                        System.out.println(\"Utente allenatore\");\r\n                        utente= new Allenatore(rs.getString(\"username\"),rs.getString(\"email\"));\r\n                    }\r\n                    else {\r\n                        System.out.println(\"Utente non allenatore\");\r\n                        utente = new Giocatore(rs.getString(\"username\"), rs.getString(\"email\"));\r\n                    }\r\n\r\n                    //controllo se un utente ha degli allenamenti\r\n                    if (rs.getString(\"allenamento\") != null) {\r\n                        try\r\n                        {\r\n                            stmtAll =conn.createStatement();\r\n                            try\r\n                            {\r\n                                //creazione della variabile dove salviamo gli allenamenti del DB\r\n                                List<Allenamento> allenamenti = new ArrayList<>();\r\n\r\n                                //recupero gli allenamenti dal database\r\n                                allenamenti=recuperaAllenamentiPerData(stmtAll, rs.getString(\"allenamento\"));\r\n\r\n                                //aggiungo all'utente gli allenamenti\r\n                                utente.setAllenamenti(allenamenti);\r\n\r\n                            } catch (SQLException e) {throw new RuntimeException(e);}\r\n\r\n                        } catch (SQLException e) {throw new RuntimeException(e);}\r\n                    }\r\n                }\r\n\r\n\r\n            } catch (SQLException e) {\r\n                System.out.println(\"Prima eccezione rilevata\");\r\n                e.printStackTrace();\r\n\r\n            } finally\r\n            {\r\n                try {\r\n                    if (conn != null) conn.close();\r\n                } catch (SQLException e) {\r\n                    System.out.println(\"Seconda eccezione rilevata\");\r\n                }\r\n                //return null;\r\n            }\r\n        }/* throws UserDoesNotExistException;*/\r\n        return null;\r\n    }\r\n\r\n    public void handleDAOException(Exception e) {}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/engineering/dao/UtenteDAOMySQL.java b/src/main/java/engineering/dao/UtenteDAOMySQL.java
--- a/src/main/java/engineering/dao/UtenteDAOMySQL.java	(revision cdcf5c3e8fb46d2eb6f3148c65b1e98a402e4a99)
+++ b/src/main/java/engineering/dao/UtenteDAOMySQL.java	(date 1732643634989)
@@ -1,5 +1,6 @@
 package engineering.dao;
 
+import engineering.eccezioni.EccezzioneGenerica;
 import engineering.query.QueriesLogin.*;
 import engineering.eccezioni.UtenteNonEsistenteEccezione;
 import modelli.*;
@@ -10,14 +11,10 @@
 
 import static engineering.query.QueriesLogin.RecuperaUtentePerLogin;
 import static engineering.query.QueriesLogin.recuperaAllenamentiPerData;
+import static engineering.query.QueryRegistrazione.InserisciUtenteQuery;
 
 public class UtenteDAOMySQL implements UtenteDAO {
 
-    public void inserisciUtente(Utente utente)
-    {
-        String query="insert into utenti(user, email, password, squadre, allenatore) values ('nonLoSo', 'boh', 'bohNonSo',NULL,'false');";
-    }//throws EmailAlreadyInUseException, UsernameAlreadyInUseException;
-
     public Utente caricaUtente(String string)
     {return null;}//throws UserDoesNotExistException;
 
@@ -42,6 +39,40 @@
         }
     }
 
+    public void inserisciUtente(Registrazione registrazione)
+    {
+        Statement stmt = null;
+        Connection conn = null;
+        ResultSet rs = null;
+        int result = 0;
+
+        conn = MySQLConnection.getConnection();
+
+        if(conn!=null)
+        {
+            try
+            {
+                result = InserisciUtenteQuery(conn, registrazione);
+                if (result > 0) {
+                    System.out.println("A new user was inserted successfully!");
+                }
+
+            } catch (EccezzioneGenerica e)
+            {
+                throw new EccezzioneGenerica(e.getMessage());
+            }
+            finally
+            {
+                try
+                {
+                    if(conn!=null) conn.close();
+                } catch (SQLException e)
+                {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }//throws EmailAlreadyInUseException, UsernameAlreadyInUseException;
 
 
 
@@ -55,11 +86,9 @@
         conn = MySQLConnection.getConnection();
         if (conn != null) {
             try {
-                //creaiamo lo statement per il caso
-                stmt = conn.createStatement();
 
                 //invocazione del metodo per la ricerca dell'utente in funzione della variabile di ricerca
-                rs = RecuperaUtentePerLogin(stmt, login);
+                rs = RecuperaUtentePerLogin(conn, login);
 
 
                 while (rs.next()) {
@@ -77,7 +106,7 @@
                     }
 
                     //controllo se un utente ha degli allenamenti
-                    if (rs.getString("allenamento") != null) {
+                    if (recuperaAllenamentoPerUtente(conn, login))
                         try
                         {
                             stmtAll =conn.createStatement();
Index: src/main/java/engineering/query/QueryRegistrazione.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package engineering.query;\r\n\r\nimport modelli.Login;\r\nimport modelli.Utente;\r\n\r\npublic class QueryRegistrazione {\r\n\r\n    public void InserisciUtente(Login login) {\r\n        String query = \"insert into utenti(user, email, password, squadre, allenatore) values ('\"+login.getUsername()+\"','\"+login.getEmail()+\"','\"+utente.ge+\"',NULL,'false');\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/engineering/query/QueryRegistrazione.java b/src/main/java/engineering/query/QueryRegistrazione.java
--- a/src/main/java/engineering/query/QueryRegistrazione.java	(revision cdcf5c3e8fb46d2eb6f3148c65b1e98a402e4a99)
+++ b/src/main/java/engineering/query/QueryRegistrazione.java	(date 1732642049470)
@@ -1,11 +1,30 @@
 package engineering.query;
 
+import engineering.eccezioni.EccezzioneGenerica;
 import modelli.Login;
+import modelli.Registrazione;
 import modelli.Utente;
 
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+
 public class QueryRegistrazione {
 
-    public void InserisciUtente(Login login) {
-        String query = "insert into utenti(user, email, password, squadre, allenatore) values ('"+login.getUsername()+"','"+login.getEmail()+"','"+utente.ge+"',NULL,'false');";
+    public static int InserisciUtenteQuery(Connection conn, Registrazione registrazione) throws EccezzioneGenerica {
+        String sql = "INSERT INTO utenti(user, email, password, squadre, allenatore) VALUES (?, ?, ?, ?, ?)";
+
+        try {
+            PreparedStatement ps = conn.prepareStatement(sql);
+            ps.setString(1, registrazione.getUsername());
+            ps.setString(2, registrazione.getEmail());
+            ps.setString(3, registrazione.getPassword());
+            ps.setString(4, null);
+            ps.setBoolean(5, registrazione.getAllenatore());
+            return ps.executeUpdate();
+
+        } catch (SQLException e) {
+            throw new EccezzioneGenerica("Errrore nell'inserimento dell'utente");
+        }
     }
 }
Index: src/main/java/modelli/Login.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package modelli;\r\n\r\npublic class Login {\r\n\r\n    private String email;\r\n    private String password;\r\n\r\n    //utilizziamo l'email solamente per la registrazione\r\n    private String username;\r\n\r\n    public Login(){}\r\n\r\n    //costruttore utilizzato nel login\r\n    public Login(String email, String password)\r\n    {\r\n        setEmail(email);\r\n        setPassword(password);\r\n    }\r\n\r\n    //costruttore utilizzato nella registrazione\r\n    public Login (String email, String password, String username)\r\n    {\r\n        setEmail(email);\r\n        setPassword(password);\r\n        setUsername(username);\r\n    }\r\n\r\n    public void setEmail(String username)\r\n    {\r\n        this.email = username;\r\n    }\r\n    public String getEmail()\r\n    {\r\n        return this.email;\r\n    }\r\n\r\n    public void setPassword(String password)\r\n    {\r\n        this.password = password;\r\n    }\r\n    public String getPassword()\r\n    {\r\n        return this.password;\r\n    }\r\n\r\n    public void setUsername(String username) {this.username = username;}\r\n    public String getUsername() {return this.username;}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/modelli/Login.java b/src/main/java/modelli/Login.java
--- a/src/main/java/modelli/Login.java	(revision cdcf5c3e8fb46d2eb6f3148c65b1e98a402e4a99)
+++ b/src/main/java/modelli/Login.java	(date 1732638559020)
@@ -5,9 +5,6 @@
     private String email;
     private String password;
 
-    //utilizziamo l'email solamente per la registrazione
-    private String username;
-
     public Login(){}
 
     //costruttore utilizzato nel login
@@ -16,14 +13,6 @@
         setEmail(email);
         setPassword(password);
     }
-
-    //costruttore utilizzato nella registrazione
-    public Login (String email, String password, String username)
-    {
-        setEmail(email);
-        setPassword(password);
-        setUsername(username);
-    }
 
     public void setEmail(String username)
     {
@@ -43,6 +32,4 @@
         return this.password;
     }
 
-    public void setUsername(String username) {this.username = username;}
-    public String getUsername() {return this.username;}
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"d48fabd9-9d0c-4832-9762-f7ff2f4fd62e\" name=\"Changes\" comment=\"Inizio registrazione in SQL e JSON\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/engineering/bean/RegistrazioneBean.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/engineering/bean/RegistrazioneBean.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Exception\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Simone2oo2&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/FrancescoMin/TeamTrainingHub.git&quot;,\r\n    &quot;accountId&quot;: &quot;64b32a3e-6402-44ac-8316-64089203d618&quot;\r\n  }\r\n}</component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHomeTypeForPersistence\" value=\"WRAPPER\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 7\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2nIPzptCElr3Z2cbKRrMzjtrfIO\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.LoginApplicazione.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;database.data.extractors.current.export.id&quot;: &quot;Comma-separated (CSV)_id&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/PC/Desktop/materie/Base di dati/esempi/jdbc/libs/mysql-connector-j-8.0.31.jar&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Libraries&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.43908045&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-fdfe4dae3a2d-intellij.indexing.shared.core-IU-243.21565.193\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-e768b9ed790e-JavaScript-IU-243.21565.193\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"d48fabd9-9d0c-4832-9762-f7ff2f4fd62e\" name=\"Changes\" comment=\"\" />\r\n      <created>1728657885128</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1728657885128</updated>\r\n      <workItem from=\"1728657886213\" duration=\"2000\" />\r\n      <workItem from=\"1730031757462\" duration=\"424000\" />\r\n      <workItem from=\"1730055384804\" duration=\"595000\" />\r\n      <workItem from=\"1730114720831\" duration=\"614000\" />\r\n      <workItem from=\"1730297470122\" duration=\"757000\" />\r\n      <workItem from=\"1731494902140\" duration=\"1762000\" />\r\n      <workItem from=\"1731503704686\" duration=\"175000\" />\r\n      <workItem from=\"1731503929228\" duration=\"8329000\" />\r\n      <workItem from=\"1731660149013\" duration=\"81000\" />\r\n      <workItem from=\"1731663590971\" duration=\"19000\" />\r\n      <workItem from=\"1731669973962\" duration=\"2033000\" />\r\n      <workItem from=\"1731678912193\" duration=\"114000\" />\r\n      <workItem from=\"1731679800544\" duration=\"8602000\" />\r\n      <workItem from=\"1731690085548\" duration=\"3598000\" />\r\n      <workItem from=\"1731708870520\" duration=\"1064000\" />\r\n      <workItem from=\"1731713507914\" duration=\"491000\" />\r\n      <workItem from=\"1731920970801\" duration=\"7271000\" />\r\n      <workItem from=\"1731936574658\" duration=\"1994000\" />\r\n      <workItem from=\"1731939308213\" duration=\"278000\" />\r\n      <workItem from=\"1731939630965\" duration=\"3282000\" />\r\n      <workItem from=\"1731944980100\" duration=\"559000\" />\r\n      <workItem from=\"1731945576897\" duration=\"3952000\" />\r\n      <workItem from=\"1731951613505\" duration=\"822000\" />\r\n      <workItem from=\"1731952472557\" duration=\"419000\" />\r\n      <workItem from=\"1732011804518\" duration=\"2776000\" />\r\n      <workItem from=\"1732015320204\" duration=\"1679000\" />\r\n      <workItem from=\"1732021817997\" duration=\"12193000\" />\r\n      <workItem from=\"1732095496957\" duration=\"3707000\" />\r\n      <workItem from=\"1732102752245\" duration=\"2116000\" />\r\n      <workItem from=\"1732264224731\" duration=\"600000\" />\r\n      <workItem from=\"1732384130453\" duration=\"654000\" />\r\n      <workItem from=\"1732551254280\" duration=\"483000\" />\r\n      <workItem from=\"1732613552949\" duration=\"6793000\" />\r\n      <workItem from=\"1732627015626\" duration=\"753000\" />\r\n      <workItem from=\"1732627821227\" duration=\"3578000\" />\r\n      <workItem from=\"1732632844638\" duration=\"908000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Inizio settaggio database\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730032171397</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730032171397</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"file workspace\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1730299192134</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1730299192136</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"inseriento BD,&#10;modifiche DAO,&#10;modalità demo introdotta\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731496548238</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731496548238</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"creazione metodo recuperoUtente per DAOJSON&#10;creazione di json di esempio\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1731713873114</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1731713873114</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"completamento JSON Login&#10;modifica nomi DAO&#10;modifiche DB&#10;modifica DAO sql\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1732095618051</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1732095618051</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"correzione foreign Key DB\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1732097143443</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1732097143443</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"modifiche lista squadra in squadra\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1732109650659</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1732109650659</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Inizio registrazione in SQL e JSON\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1732633281402</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1732633281402</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"9\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Inizio settaggio database\" />\r\n    <MESSAGE value=\"commit e push di recupero\" />\r\n    <MESSAGE value=\"file workspace\" />\r\n    <MESSAGE value=\"inseriento BD,&#10;modifiche DAO,&#10;modalità demo introdotta\" />\r\n    <MESSAGE value=\"creazione metodo recuperoUtente per DAOJSON&#10;creazione di json di esempio\" />\r\n    <MESSAGE value=\"completamento JSON Login&#10;modifica nomi DAO&#10;modifiche DB\" />\r\n    <MESSAGE value=\"completamento JSON Login&#10;modifica nomi DAO&#10;modifiche DB&#10;modifica DAO sql\" />\r\n    <MESSAGE value=\"correzione foreign Key DB\" />\r\n    <MESSAGE value=\"modifiche lista squadra in squadra\" />\r\n    <MESSAGE value=\"Inizio registrazione in SQL e JSON\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Inizio registrazione in SQL e JSON\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"engineering.eccezioni.EccezzioneGenerica\" package=\"engineering.eccezioni\" />\r\n          <option name=\"timeStamp\" value=\"4\" />\r\n        </breakpoint>\r\n        <breakpoint enabled=\"true\" type=\"java-exception\">\r\n          <properties class=\"engineering.eccezioni.UtenteNonEsistenteEccezione\" package=\"engineering.eccezioni\" />\r\n          <option name=\"timeStamp\" value=\"5\" />\r\n        </breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision cdcf5c3e8fb46d2eb6f3148c65b1e98a402e4a99)
+++ b/.idea/workspace.xml	(date 1732786888254)
@@ -4,9 +4,16 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="d48fabd9-9d0c-4832-9762-f7ff2f4fd62e" name="Changes" comment="Inizio registrazione in SQL e JSON">
+    <list default="true" id="d48fabd9-9d0c-4832-9762-f7ff2f4fd62e" name="Changes" comment="Inizio registrazione in SQL e JSON pt.2">
+      <change beforePath="$PROJECT_DIR$/.idea/dataSources/77b9377d-7f76-49e7-98de-b479fd83680a.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources/77b9377d-7f76-49e7-98de-b479fd83680a.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/engineering/bean/RegistrazioneBean.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/engineering/bean/RegistrazioneBean.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/controllerApplicativo/LoginControllerApplicativo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/controllerApplicativo/LoginControllerApplicativo.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/engineering/dao/UtenteDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/engineering/dao/UtenteDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/engineering/dao/UtenteDAOJSON.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/engineering/dao/UtenteDAOJSON.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/engineering/dao/UtenteDAOMySQL.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/engineering/dao/UtenteDAOMySQL.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/engineering/query/QueriesLogin.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/engineering/query/QueriesLogin.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/engineering/query/QueryRegistrazione.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/engineering/query/QueryRegistrazione.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/modelli/Login.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/modelli/Login.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -130,7 +137,9 @@
       <workItem from="1732613552949" duration="6793000" />
       <workItem from="1732627015626" duration="753000" />
       <workItem from="1732627821227" duration="3578000" />
-      <workItem from="1732632844638" duration="908000" />
+      <workItem from="1732632844638" duration="8864000" />
+      <workItem from="1732642226045" duration="1520000" />
+      <workItem from="1732783480157" duration="2437000" />
     </task>
     <task id="LOCAL-00001" summary="Inizio settaggio database">
       <option name="closed" value="true" />
@@ -196,7 +205,15 @@
       <option name="project" value="LOCAL" />
       <updated>1732633281402</updated>
     </task>
-    <option name="localTasksCounter" value="9" />
+    <task id="LOCAL-00009" summary="Inizio registrazione in SQL e JSON pt.2">
+      <option name="closed" value="true" />
+      <created>1732633797414</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1732633797414</updated>
+    </task>
+    <option name="localTasksCounter" value="10" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -213,7 +230,8 @@
     <MESSAGE value="correzione foreign Key DB" />
     <MESSAGE value="modifiche lista squadra in squadra" />
     <MESSAGE value="Inizio registrazione in SQL e JSON" />
-    <option name="LAST_COMMIT_MESSAGE" value="Inizio registrazione in SQL e JSON" />
+    <MESSAGE value="Inizio registrazione in SQL e JSON pt.2" />
+    <option name="LAST_COMMIT_MESSAGE" value="Inizio registrazione in SQL e JSON pt.2" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: src/main/java/engineering/dao/UtenteDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package engineering.dao;\r\n\r\nimport engineering.eccezioni.EccezzioneGenerica;\r\nimport engineering.eccezioni.UtenteNonEsistenteEccezione;\r\nimport modelli.Login;\r\nimport modelli.Utente;\r\n\r\npublic interface UtenteDAO\r\n{\r\n\r\n    public void inserisciUtente(Utente utente) throws EccezzioneGenerica;//throws EmailAlreadyInUseException, UsernameAlreadyInUseException;\r\n    public Utente caricaUtente(String string);//throws UserDoesNotExistException;\r\n    public Utente recuperaUtenteDaLogin(Login login) throws UtenteNonEsistenteEccezione; /* throws UserDoesNotExistException;*/\r\n    public void handleDAOException(Exception e);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/engineering/dao/UtenteDAO.java b/src/main/java/engineering/dao/UtenteDAO.java
--- a/src/main/java/engineering/dao/UtenteDAO.java	(revision cdcf5c3e8fb46d2eb6f3148c65b1e98a402e4a99)
+++ b/src/main/java/engineering/dao/UtenteDAO.java	(date 1732638937504)
@@ -1,14 +1,16 @@
 package engineering.dao;
 
+import engineering.bean.RegistrazioneBean;
 import engineering.eccezioni.EccezzioneGenerica;
 import engineering.eccezioni.UtenteNonEsistenteEccezione;
 import modelli.Login;
+import modelli.Registrazione;
 import modelli.Utente;
 
 public interface UtenteDAO
 {
 
-    public void inserisciUtente(Utente utente) throws EccezzioneGenerica;//throws EmailAlreadyInUseException, UsernameAlreadyInUseException;
+    public void inserisciUtente(Registrazione registrazione) throws EccezzioneGenerica;//throws EmailAlreadyInUseException, UsernameAlreadyInUseException;
     public Utente caricaUtente(String string);//throws UserDoesNotExistException;
     public Utente recuperaUtenteDaLogin(Login login) throws UtenteNonEsistenteEccezione; /* throws UserDoesNotExistException;*/
     public void handleDAOException(Exception e);
Index: src/main/java/engineering/dao/UtenteDAOJSON.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package engineering.dao;\r\n\r\nimport com.google.gson.*;\r\nimport engineering.eccezioni.EccezzioneGenerica;\r\nimport engineering.eccezioni.UtenteNonEsistenteEccezione;\r\nimport modelli.Allenatore;\r\nimport modelli.Giocatore;\r\nimport modelli.Login;\r\nimport modelli.Utente;\r\n\r\nimport java.io.*;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\n\r\n\r\npublic class UtenteDAOJSON implements UtenteDAO\r\n{\r\n\r\n    public void handleDAOException(Exception e) {\r\n        System.out.println(\"Errore gestito in UtenteDAOJSON: \" + e);\r\n    }\r\n\r\n    public void inserisciUtente(Utente utente)\r\n    {\r\n        try {\r\n            //Creazione del path\r\n            String filePath = \"src/main/resources/persistenza/utenti/\" + utente.getUsername() + \".json\";\r\n\r\n            try {\r\n                //controllo che il file sia già esistente\r\n                Files.readAllBytes(Paths.get(filePath));\r\n                throw new EccezzioneGenerica(\"utente esistente\");\r\n\r\n            } catch (IOException e) {\r\n                //crezione del file con nome username dell'utente in formato json\r\n                Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n                FileWriter writer = new FileWriter(filePath);\r\n\r\n\r\n                //salvataggio dell'oggetto serializzato utente nel file json\r\n                writer.write(gson.toJson(utente));\r\n                writer.close();\r\n                throw new EccezzioneGenerica(\"utente inserito\");\r\n            }\r\n\r\n\r\n        } catch (Exception e) {\r\n            throw new EccezzioneGenerica(e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n    public Utente recuperaUtenteDaLogin(Login login) throws UtenteNonEsistenteEccezione//throws UserDoesNotExistException\r\n    {\r\n        try\r\n        {\r\n            //Serializziamo l'oggetto in JSON\r\n            Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n\r\n            //creazione del path\r\n            String filePath = \"src/main/resources/persistenza/utenti/\"+login.getEmail()+\".json\";\r\n\r\n            //dato il path del file, leggo il file JSON\r\n            String jsonString = new String(Files.readAllBytes(Paths.get(filePath)));\r\n            JsonObject jsonObject = gson.fromJson(jsonString, JsonObject.class);\r\n\r\n            //inizializzo un oggetto di tipo Login per il controllo delle credenziali\r\n            Login deserializedLogin = new Login(jsonObject.get(\"username\").getAsString(), jsonObject.get(\"password\").getAsString());\r\n\r\n            //controllo della password\r\n            if (deserializedLogin.getPassword().equals(login.getPassword()))\r\n            {\r\n                System.out.println(\"Login effettuato con successo\");\r\n\r\n                //mi faccio recuperare dal metodo addetto l'utente che è acceduto\r\n                Utente utente = caricaUtente(login.getEmail());\r\n                return utente;\r\n            }\r\n\r\n            else\r\n            {\r\n                System.out.println(\"Password errata: lancio eccezione di password errata\");\r\n                throw new UtenteNonEsistenteEccezione(\"Password errata: lancio eccezione di password errata\");\r\n            }\r\n        }\r\n\r\n        catch (UtenteNonEsistenteEccezione | IOException e)\r\n        {\r\n            throw new UtenteNonEsistenteEccezione(e.getMessage());\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public Utente caricaUtente(String string)  /*UserDoesNotExistException*/\r\n    {\r\n        try {\r\n            //Serializziamo l'oggetto in JSON\r\n            Gson gson = new GsonBuilder().setPrettyPrinting().create();\r\n\r\n            //creazione del path\r\n            String filePath = \"src/main/resources/persistenza/utenti/\" + string + \".json\";\r\n\r\n            String jsonString = new String(Files.readAllBytes(Paths.get(filePath)));\r\n            JsonObject jsonObject = gson.fromJson(jsonString, JsonObject.class);\r\n\r\n\r\n            //faccio il controllo che l'untente sia un allenatore o un giocatore\r\n            if (jsonObject.get(\"allenatore\").getAsBoolean()) {\r\n                System.out.println(\"L'utente è un allenatore\");\r\n                Utente utente = new Allenatore(jsonObject.get(\"username\").getAsString(), jsonObject.get(\"email\").getAsString());\r\n                return utente;\r\n            } else {\r\n                Utente utente = new Giocatore(jsonObject.get(\"username\").getAsString(), jsonObject.get(\"email\").getAsString());\r\n                return utente;\r\n            }\r\n        }\r\n\r\n        catch(IOException e)\r\n        {\r\n            //gestione dell'eccezione\r\n            System.out.println(\"Errore di stream I/O\");\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //public String getPasswordByEmail(String email);\r\n    //public boolean checkIfUserExistsByEmail(String email);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/engineering/dao/UtenteDAOJSON.java b/src/main/java/engineering/dao/UtenteDAOJSON.java
--- a/src/main/java/engineering/dao/UtenteDAOJSON.java	(revision cdcf5c3e8fb46d2eb6f3148c65b1e98a402e4a99)
+++ b/src/main/java/engineering/dao/UtenteDAOJSON.java	(date 1732638937563)
@@ -3,10 +3,7 @@
 import com.google.gson.*;
 import engineering.eccezioni.EccezzioneGenerica;
 import engineering.eccezioni.UtenteNonEsistenteEccezione;
-import modelli.Allenatore;
-import modelli.Giocatore;
-import modelli.Login;
-import modelli.Utente;
+import modelli.*;
 
 import java.io.*;
 import java.nio.file.Files;
@@ -20,11 +17,11 @@
         System.out.println("Errore gestito in UtenteDAOJSON: " + e);
     }
 
-    public void inserisciUtente(Utente utente)
+    public void inserisciUtente(Registrazione registrazione)
     {
         try {
             //Creazione del path
-            String filePath = "src/main/resources/persistenza/utenti/" + utente.getUsername() + ".json";
+            String filePath = "src/main/resources/persistenza/utenti/" + registrazione.getUsername() + ".json";
 
             try {
                 //controllo che il file sia già esistente
@@ -38,7 +35,7 @@
 
 
                 //salvataggio dell'oggetto serializzato utente nel file json
-                writer.write(gson.toJson(utente));
+                writer.write(gson.toJson(registrazione));
                 writer.close();
                 throw new EccezzioneGenerica("utente inserito");
             }
